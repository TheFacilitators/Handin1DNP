@page "/EditAdult/{Id:int}"
@using Models
@using Handin1.Data
@attribute [Authorize(Policy = "MustBeLoggedIn")]

@inject IAdultsData Data
@inject NavigationManager Nav

<h3>Edit Adult by ID: @Id</h3>

@if (editing == null)
{
    <p>No adult found with that ID</p>
}
else
{
    <EditForm Model="@editing" OnValidSubmit="@Save">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="from-group">
            First name:<br/>
            <InputTextArea rows="4" @bind-Value="editing.FirstName"/>
        </div>
        <div class="from-group">
            Last name:<br/>
            <InputTextArea rows="4" @bind-Value="editing.LastName"/>
        </div>
        <div class="form-group">
            Age:<br/>
            <InputNumber @bind-Value="editing.Age"></InputNumber>
        </div>
        <div class="form-group">
            Sex:<br/>
            <InputRadioGroup @bind-Value="editing.Sex">
                        @foreach (var opt in radioOpt)
                        {
                            <InputRadio Value="opt"/>@opt<br/>
                        }
                    </InputRadioGroup>
        </div>
        <p class="actions">
            <button class="btn btn-outline-dark" type="submit">Save</button>
        </p>
    </EditForm>
}


@code {
    [Parameter] public int Id { get; set; }
    private Adult editing;
    List<string> radioOpt = new List<string> {" M", " F", " O"};

    protected override Task OnInitializedAsync()
    {
        editing = Data.GetAdultById(Id);
        return base.OnInitializedAsync();
    }

    private void Save()
    {
        Data.EditAdult(editing);
        Nav.NavigateTo("/Adults");
    }

}

