@page "/Adults"
@using Models
@using Handin1.Data

@inject IAdultData AdultData
@inject NavigationManager NavMag

<h3>Adults</h3>

 @if (adults == null) {
     <p><b>Loading...</b></p>
        }
 else if (adults.Count == 0) {
     <p><b>There are no adults around here</b></p>
 }
 else {
     
     <p>
         Filter by name: <input type="text" @oninput="(arg) => FilterByName(arg)" style="width: 100px"/>
     </p>

     <table class="table">
         <thead>
         <tr>
             <th>Person ID</th>
             <th>Name</th>
             <th>Surname</th>
             <th>Age</th>
         </tr>
         </thead>
         <tbody>

         @foreach (var item in adults) {
             <tr>
                 <td>@item.Id</td>
                 <td>@item.FirstName</td>
                 <td>@item.LastName</td>
                 <td>@item.Age</td>
                 <AuthorizeView>
                  <td>
                                     <button @onclick="@(() => EditAdult(item.Id))">
                                         <i class="oi oi-pencil" style="color:orange"/>
                                     </button>
                                 </td>
                 <td>
                     <button @onclick="@(() => RemoveAdult(item.Id))">
                         <i class="oi oi-trash" style="color:red"/>
                     </button>
                 </td>
                 </AuthorizeView>
             </tr>
         }

         </tbody>
     </table>
 }
@code {
    private IList<Adult> adults;

    private string searchByName;

    private void RemoveAdult(int id) {
        AdultData.RemoveAdult(id);
    }

    private void EditAdult(int id) {
        NavMag.NavigateTo($"EditAdult/{id}");
    }

    protected override async Task OnInitializedAsync() {
        adults = AdultData.GetAdults();
    }

    private void FilterByName(ChangeEventArgs search)
    {
      
    }

}