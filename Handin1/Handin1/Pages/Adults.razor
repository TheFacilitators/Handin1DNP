@page "/Adults"

@using Data
@using Models
@inject IAdultsData Data
@inject NavigationManager Nav

<h3>Adults</h3>

<p>Adults</p>
<p>
    Filter by name: <input type="text" @oninput="((arg) => FilterByName(arg)" style="width: 100px"/>
</p>
<p>
    Filter by age: <input type="number" @oninput="((arg) => FilterByAge(arg)" style="width: 50px"/>
</p>

<table class="table">
        <thead>
        <tr>
            <th>Person ID</th>
            <th>First name</th>
            <th>Surname</th>
            <th>Age</th>
        </tr>
        </thead>
        <tbody>
        
        
        @if (displayed == null)
        {
            <p>Loading...</p>
        }
        else if (!displayed.Any())
        {
            <p>No adults match the criteria</p>
        }
        else
        {
            @foreach (var item in displayed)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.FirstName</td>
                    <td>@item.LastName</td>
                    <td>@item.Age</td>
                    <td>
                        <button @onclick="@(() => EditAdult(item.Id))">
                            <i class="oi oi-pencil"></i>
                        </button>
                    </td>
                    <td>
                        <button @onclick="@(() => RemoveAdult(item.Id))">
                            <i class="oi oi-trash" style="color: red"></i>
                        </button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
        
@code {
    private IList<Adult> adults;
    private IList<Adult> displayed;

    private string filterByName;
    private int? filterByAge;

    protected override Task OnInitializedAsync()
    {
        adults = Data.GetAllAdults();
        displayed = adults;
        return base.OnInitializedAsync();
    }

    private void EditAdult(int id)
    {
        Nav.NavigateTo($"EditAdult/{id}");
    }

    private void RemoveAdult(int id)
    {
        Data.RemoveAdult(id);
    }

    private void FilterByName(ChangeEventArgs arg)
    {
        filterByName = null;
        try
        {
            filterByName = arg.Value.ToString();
        }
        catch (Exception e)
        {
            //
        }
        ExecuteFilter();
    }

    private void FilterByAge(ChangeEventArgs arg)
    {
        filterByAge = null;
        try
        {
            filterByAge = int.Parse(arg.Value.ToString());
        }
        catch (Exception e)
        {
            //
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        displayed = adults.Where(a =>
            ((filterByName != null && (a.FirstName == filterByName || a.LastName == filterByName) || filterByName == null)) &&
            (filterByAge != null && a.Age == filterByAge || filterByAge == null)).ToList();
    }
}